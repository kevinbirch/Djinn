{"name":"Djinn","body":"# Welcome to the Djinn Programming Language\r\n\r\nDjinn (جن) are supernatural creatures in Arab folklore and Islamic teachings that occupy a parallel world to that of mankind.\r\n\r\nDjinn is a concatenative, functional, stack-based programming language.\r\n\r\n## Getting Started\r\n\r\n1. Build the project\r\n\r\n    $ mvn package\r\n\r\n2. Run the REPL\r\n\r\n    $ java -jar target/djinn-1.0-SNAPSHOT-uber.jar\r\n\r\n3. Enjoy\r\n\r\n## The Canonical \"Hello World\" Example\r\n\r\n    $ java -jar target/djinn-1.0-SNAPSHOT-uber.jar\r\n    Welcome to Djinn.\r\n    Type \":quit\" or \":exit\" to end your session.  Type \":help\" for instructions.\r\n\r\n    User> \"hello, world\" println\r\n    hello, world\r\n    stack:\r\n\r\n## Syntax and Semantics\r\n\r\nThe REPL supports three forms of statements: declarations, functions and immediate statements.\r\n\r\n### Declarations\r\n\r\nTo bind a name to the result of a lambda, use a declaration:\r\n\r\n    User> \\name \"Djinn\"\r\n    => <<Declaration>> \"name\" = [\"Djinn\"]\r\n\r\nThe name \"name\" is now bound to a lambda containing the string \"Djinn\".  When this name is referenced, the lambda will be\r\nevaluated  at that time.  This is an example of the syntax sugar provided when you want to simply bind a single immediate\r\nvalue to a name.  Immediate values can be integers, decimals or strings.  Otherwise if you want to bind the result of a\r\ncomplete lambda to a name, do this:\r\n\r\n    User> \\value [1 1 add]\r\n    => <<Declaration>> \"value\" = [1 1 add]\r\n\r\n### Functions\r\n\r\nTo create a new function, do this:\r\n\r\n    User> \\[increment 1 add]\r\n    => <<Function>> \"increment\"\r\n\r\nThe syntax for functions takes the form of:\r\n\r\n    '\\[' NAME (lambda '?')? atom+ function* declaration* ']'\r\n\r\nThe name of the function comes first, followed by an optional pattern lambda.  This is a special lambda that will be\r\nexecuted before the body of the function to determine if the function should be activated.  The pattern lambda definition\r\nMUST be suffixed by a question mark ('?') to be considered as the pattern.\r\n\r\nIn this way, multiple function definitions can be grouped together into a \"method\" sharing the same name, but different\r\npatterns and bodies.  If a function is a member of a method family, then the members will be evaluated one-at-a-time to\r\ndetermine which one should be activated. If a member does not have a pattern defined and none of the pattern-bearing\r\nmembers were suitable then that default function will be activated.\r\n\r\nFor example, the definition for the method \"ifel\" (from the Djinn prelude):\r\n\r\n    \\[ifel [id]? drop [drop] dip apply]\r\n    \\[ifel drop drop apply]\r\n\r\n### Immediate Statements\r\n\r\nAny terms entered into the REPL that are not defining declarations or functions will be executed immediately.\r\n\r\n    User> name\r\n    stack: \"Djinn\"\r\n\r\n    User> 5 increment\r\n    stack: \"Djinn\" 6\r\n\r\n    User> value\r\n    stack: \"Djinn\" 6 2\r\n\r\n## License\r\n\r\nCopyright (c) 2011 Kevin Birch\r\n\r\nDistributed under an [MIT-style](http://www.opensource.org/licenses/mit-license.php) license.","tagline":"The Djinn Programming Language","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}